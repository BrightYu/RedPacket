/*
 * Copyright (C) 2015 The yuhaiyang Android Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'com.android.application'

// 方法定义获取当前时间
def releaseTime() {
    return new Date().format("yyyy_MMdd")
}

// 方法定义获取当前时间
def generateVersionCode() {
    return new Date().format("yyyyMMddHH")
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        // app的id 包名
        applicationId RELEASE_APPLICATION_ID

        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int

        versionCode generateVersionCode() as int
        versionName VERSION_NAME

        // 配置 含有的版本类型
        buildConfigField "int", "VERSION_DEVELOP", VERSION_DEVELOP
        buildConfigField "int", "VERSION_RELEASE", VERSION_RELEASE

        resConfig "zh"
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STOREFILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_DEVELOP

            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // 百度统计渠道
                    BAIDU_STATISTICS_ID     : DEVELOP_BAIDU_STATISTICS_ID,
                    BAIDU_STATISTICS_CHANNEL: DEVELOP_BAIDU_STATISTICS_CHANNEL]
        }
        release {
            minifyEnabled false
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_RELEASE

            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // 百度统计渠道
                    BAIDU_STATISTICS_ID     : RELEASE_BAIDU_STATISTICS_ID,
                    // 百度统计渠道
                    BAIDU_STATISTICS_CHANNEL: RELEASE_BAIDU_STATISTICS_CHANNEL]

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        def fileName = "RedPacket_V${defaultConfig.versionName}_${releaseTime()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')
        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES.txt'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/dependencies.txt'
            exclude 'META-INF/LGPL2.1'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':LibCommon')
}
